{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","App","props","React","Component","Cell","td","Cells","className","onClick","value","AllBoard","Table","table","Game","Main","state","cells","Array","fill","turnCircle","counter","i","newCells","this","slice","isWin","newCounter","setState","handleClick","renderCell","Top","Turn","TurnItem","Display","circleClass","crossClass","Under","Message","Button","a","Messages","result","window","location","reload","array","lines","length","b","c","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bf73dfa8.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n`;\n\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return(\n      <Container>\n        <Main />\n      </Container>\n    );\n  }\n}\n\n\nexport default App;\n\n// Cellコンポーネント\n\nconst Cell = styled.td`\nbackground: #fefefe;\nheight: 48px;\nwidth: 48px;\ncursor: pointer;\nfont-size: 2rem;\n&.js-no-mark{\n  pointer-events: none;\n}\n`;\n\nfunction Cells(props) {\n  return(\n    <Cell className=\"js-cell\" onClick = {props.onClick}>\n      {props.value}\n    </Cell>\n )\n}\n\n// Mainコンポーネント\n\nconst AllBoard = styled.div`\npadding: 16px;\n`;\nconst Table = styled.table`\nbackground-color: black;\nborder: 2px solid #fefefe;\n`;\nconst Line = styled.div`\ndisplay: flex;\nborder-bottom: 1px solid black;\n`;\n\nconst Game = styled.div`\n`;\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cells: Array(9).fill(null),\n      turnCircle: true,\n      counter: 0\n    };\n  }\n  handleClick(i) {\n    const newCells = this.state.cells.slice();\n    if(newCells[i] || isWin(newCells)) {\n      return;\n    }\n    newCells[i] = this.state.turnCircle ? '○' : '×';\n    let newCounter = this.state.counter;\n    newCounter++;\n    this.setState({\n      cells: newCells,\n      turnCircle: !this.state.turnCircle,\n      counter: newCounter\n    });\n  }\n  renderCell(i) {\n    return (\n      <Cells\n        value={this.state.cells[i]}\n        onClick = {() => this.handleClick(i)}\n      />\n    );\n  }\n  render() {\n    return(\n      <Game>\n        <Display turnCircle={this.state.turnCircle}/>\n        <AllBoard>\n          <Table>\n            <tbody>\n              <tr className=\"row\">\n                {this.renderCell(0)}\n                {this.renderCell(1)}\n                {this.renderCell(2)}\n              </tr>\n              <tr className=\"row\">\n                {this.renderCell(3)}\n                {this.renderCell(4)}\n                {this.renderCell(5)}\n              </tr>\n              <tr className=\"row\">\n                {this.renderCell(6)}\n                {this.renderCell(7)}\n                {this.renderCell(8)}\n              </tr>\n            </tbody>\n          </Table>\n        </AllBoard>\n        <Messages\n          cells={this.state.cells}\n          counter={this.state.counter}\n        />\n        \n      </Game>\n    )\n  }\n}\n\n// Displayコンポーネント\n\nconst Top = styled.div`\npadding: 16px;\n`;\nconst Turn = styled.div`\ndisplay: flex;\njustify-content: center;\n`;\nconst TurnItem = styled.div`\n&.noActive {\n  font-size: 1.2rem;\n  font-weight: bold;\n  padding: 8px 16px; \n}\n&.active {\n  font-size: 1.2rem;\n  font-weight: bold;\n  padding: 8px 16px;\n  border-bottom: 3px solid black;\n}\n`;\n\nclass Display extends React.Component {\n  render() {\n    const circleClass = this.props.turnCircle ? 'active' : 'noActive';\n    const crossClass = this.props.turnCircle ? 'noActive' : 'active';\n    return(\n      <Top>\n        <h1>TIC TAC TOE</h1>\n        <Turn>\n          <TurnItem className={circleClass}>○</TurnItem>\n          <TurnItem className={crossClass}>×</TurnItem>\n        </Turn>\n      </Top>   \n    )\n  }\n}\n\n// Messagesコンポーネント\n\nconst Under = styled.div`\ndisplay: flex;\nflex-direction: column;\n-webkit-box-pack: center;\njustify-content: center;\npadding: 16px;\n`;\nconst Message = styled.div`\npadding: 8px;\n`;\nconst Button = styled.a`\ndisplay: inline-block;\nfont-weight: bold;\nborder: 3px solid black;\nborder-radius: 6px;\npadding: 4px 16px;\n&:hover{\n  background-color: black;\n  color: white;\n  cursor: pointer;\n}\n`;\n\n\nclass Messages extends React.Component {\n  render() {\n    let result;\n    if(isWin(this.props.cells)) {\n      result = `${isWin(this.props.cells)} win`;\n    } else if(this.props.counter === 9) {\n      result = 'draw';\n    }  else {\n      result = 'processing';\n    }\n    return(\n      <Under>\n        <Message className=\"js-state-message\">{result}</Message>\n        <Button \n          className=\"js-restart\"\n          onClick= {() => window.location.reload()}\n          >Restart</Button>\n      </Under>\n    )\n  }\n}\n\n// 勝敗の判定\n\nconst isWin = (array) => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for(let i = 0;i < lines.length;i++) {\n    const [a,b,c] = lines[i];\n    if(array[a] && array[b] === array[a] && array[c] === array[a] ) {\n      return array[a];\n    }\n  }\n  return null;\n} ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}